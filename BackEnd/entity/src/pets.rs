//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "pets")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: Option<i32>,
    pub pet_types_id: Option<i32>,
    pub pet_breeds_id: Option<i32>,
    pub date_birth: Option<Date>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::pet_breeds::Entity",
        from = "Column::PetBreedsId",
        to = "super::pet_breeds::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PetBreeds,
    #[sea_orm(
        belongs_to = "super::pet_types::Entity",
        from = "Column::PetTypesId",
        to = "super::pet_types::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PetTypes,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::pet_breeds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PetBreeds.def()
    }
}

impl Related<super::pet_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PetTypes.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
