//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "goods")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub id_ext: Option<String>,
    pub name: Option<String>,
    pub pic: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub producer_id: Option<i32>,
    pub article: Option<String>,
    pub class_id: Option<i32>,
    pub group_id: Option<i32>,
    pub allergy: Option<String>,
    pub description_imp: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::goods_classes::Entity",
        from = "Column::ClassId",
        to = "super::goods_classes::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GoodsClasses,
    #[sea_orm(
        belongs_to = "super::goods_group::Entity",
        from = "Column::GroupId",
        to = "super::goods_group::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GoodsGroup,
    #[sea_orm(has_one = "super::goods_orgs::Entity")]
    GoodsOrgs,
    #[sea_orm(has_one = "super::goods_pets::Entity")]
    GoodsPets,
    #[sea_orm(has_one = "super::marking::Entity")]
    Marking,
    #[sea_orm(has_one = "super::orders::Entity")]
    Orders,
    #[sea_orm(
        belongs_to = "super::producers::Entity",
        from = "Column::ProducerId",
        to = "super::producers::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Producers,
    #[sea_orm(has_one = "super::stocks::Entity")]
    Stocks,
}

impl Related<super::goods_classes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GoodsClasses.def()
    }
}

impl Related<super::goods_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GoodsGroup.def()
    }
}

impl Related<super::goods_orgs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GoodsOrgs.def()
    }
}

impl Related<super::goods_pets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GoodsPets.def()
    }
}

impl Related<super::marking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Marking.def()
    }
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl Related<super::producers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Producers.def()
    }
}

impl Related<super::stocks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stocks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
