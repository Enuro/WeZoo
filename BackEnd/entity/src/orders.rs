//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "orders")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub data: Option<Date>,
    pub time: Option<Time>,
    #[sea_orm(unique)]
    pub goods_id: String,
    pub clinic_id: Option<i32>,
    pub quantity: Option<i32>,
    pub user_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cliniks::Entity",
        from = "Column::ClinicId",
        to = "super::cliniks::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Cliniks,
    #[sea_orm(
        belongs_to = "super::goods::Entity",
        from = "Column::GoodsId",
        to = "super::goods::Column::IdExt",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Goods,
    #[sea_orm(has_many = "super::reports::Entity")]
    Reports,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::cliniks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cliniks.def()
    }
}

impl Related<super::goods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Goods.def()
    }
}

impl Related<super::reports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reports.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
